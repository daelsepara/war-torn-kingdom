; "Abilities and Combat"

<CONSTANT LOOKUP-ABILITY <LTABLE P?CHARISMA P?COMBAT P?MAGIC P?SANCTITY P?SCOUTING P?THIEVERY P?DEFENSE P?STAMINA>>

<ROUTINE APPLY-NEGATIVE-EFFECTS (ABILITY "AUX" AILMENT (EFFECTS NONE) (SCORE 0))
    <SET SCORE 0>
    <COND (<G? <COUNT-CONTAINER ,AILMENTS> 0>
        <SET AILMENT <FIRST? ,AILMENTS>>
        <REPEAT ()
            <COND (<NOT .AILMENT> <RETURN>)>
            <SET EFFECTS <GETP .AILMENT ,P?EFFECTS>>
            <COND (.EFFECTS
                <SET SCORE <- .SCORE <GET .EFFECTS .ABILITY>>>
            )>
            <SET AILMENT <NEXT? .AILMENT>>
        >
    )>
    <RETURN .SCORE>>

; "Calculates ability scores"
<ROUTINE CALCULATE-ABILITY (CHARACTER ABILITY "OPT" CONTAINER "AUX" SCORE PROPERTY)
    <COND (<NOT .CONTAINER> <SET .CHARACTER ,PLAYER>)>
    <SET PROPERTY <GET-ABILITY-PROPERTY .ABILITY>>
    <SET SCORE <GET-ABILITY-SCORE .CHARACTER .ABILITY>>
    <COND (<EQUAL? .ABILITY ABILITY-COMBAT>
        <SET SCORE <+ .SCORE <FIND-BEST .PROPERTY ,WEAPONBIT .CONTAINER>>>
    )(<N=? .ABILITY ABILITY-DEFENSE>
        <SET SCORE <+ .SCORE <FIND-BEST .PROPERTY NONE .CONTAINER>>>
    )>
    <SET SCORE <+ .SCORE <FIND-BEST .PROPERTY NONE ,BLESSINGS>>>
    <SET SCORE <+ .SCORE <APPLY-NEGATIVE-EFFECTS .ABILITY>>>
    <COND (<G? .SCORE 12> <SET SCORE 12>)>
    <COND (<L? .SCORE 1> <SET SCORE 1>)>
    <RETURN .SCORE>>

; "Get object property that is associated to ability"
<ROUTINE GET-ABILITY-PROPERTY (ABILITY "AUX" (PROPERTY NONE))
    <SET PROPERTY <GET ,LOOKUP-ABILITY .ABILITY>>
    <RETURN .PROPERTY>>

; "Get ability score"
<ROUTINE GET-ABILITY-SCORE (CHARACTER ABILITY "OPT" PROPERTY RESULT)
    <SET PROPERTY <GET-ABILITY-PROPERTY .ABILITY>>
    <COND (.PROPERTY
        <SET RESULT <GETP .CHARACTER .PROPERTY>>
        <RETURN .RESULT>
    )>
    <RETURN 1>>

; "Finds the item with the best PROPERTY score"
<ROUTINE FIND-BEST (PROPERTY "OPT" (FLAG NONE) CONTAINER (MATCH 0) "AUX" (SCORE 0) (ITEM NONE) (RESULT 0))
    <SET RESULT 0>
    <SET SCORE 0>
    <COND (<NOT .CONTAINER> <SET .CONTAINER ,PLAYER>)>
    <SET ITEM <FIRST? .CONTAINER>>
    <REPEAT ()
        <COND (<NOT .ITEM> <RETURN>)>
        <SET SCORE <GETP .ITEM .PROPERTY>>
        <COND (<G? .MATCH 0>
            <COND (.FLAG
                <COND (<AND <FSET? .ITEM .FLAG> <FSET? .ITEM ,NDESCBIT>>
                    <COND (<EQUAL? .SCORE .MATCH>
                        <SET .RESULT .SCORE>
                        <RETURN>
                    )>
                )>
            )(<AND <NOT <FSET? .ITEM ,NDESCBIT>> <EQUAL? .SCORE .MATCH>>
                <SET .RESULT .SCORE>
                <RETURN>
            )>
        )(.FLAG
            <COND (<AND <NOT <FSET? .ITEM ,NDESCBIT>> <FSET? .ITEM .FLAG>>
                <COND (<G? .SCORE .RESULT>
                    <SET .RESULT .SCORE>
                )>
            )> 
        )(<AND <NOT <FSET? .ITEM ,NDESCBIT>> <G? .SCORE .RESULT>>
            <SET .RESULT .SCORE>
        )>
        <SET ITEM <NEXT? .ITEM>>
    >
    <RETURN .RESULT>>

; "as above but find in list"
<ROUTINE FIND-BEST-LIST (PROPERTY "OPT" (FLAG NONE) LIST "AUX" COUNT SCORE ITEM RESULT)
    <COND (<NOT .LIST> <RETURN 0>)>
    <SET SCORE 0>
    <SET RESULT 0>
    <SET COUNT <GET .LIST 0>>
    <DO (I 1 .COUNT)
        <SET ITEM <GET .LIST .I>>
        <SET SCORE <GETP .ITEM .PROPERTY>>
        <COND (<AND .FLAG <NOT <FSET? .ITEM ,NDESCBIT>>>
            <COND (<FSET? .ITEM .FLAG>
                <COND (<G? .SCORE .RESULT> <SET .RESULT .SCORE>)>
            )>
        )(<AND <G? .SCORE .RESULT> <NOT <FSET? .ITEM ,NDESCBIT>>>
            <SET .RESULT .SCORE>
        )>
    >
    <RETURN .RESULT>>

; "Fighting routines"
; ---------------------------------------------------------------------------------------------

; "messages during rounds of combat"

<ROUTINE ATTACK-INEFFECTIVE (ATTACKER)
    <CRLF>
    <HLIGHT ,H-BOLD>
    <COND (<EQUAL? .ATTACKER ,CURRENT-CHARACTER>
        <TELL D .ATTACKER>
    )(ELSE
        <TELL CT .ATTACKER>
    )>
    <TELL "'s attack was ineffective" ,EXCLAMATION-CR>
    <HLIGHT 0>>

; "messages during rounds of combat"
<ROUTINE ATTACK-MESSAGE (ATTACKER DEFENDER ATTACK DAMAGE)
    <CRLF>
    <HLIGHT ,H-BOLD>
    <COND (<EQUAL? .ATTACKER ,CURRENT-CHARACTER>
        <TELL D .ATTACKER "'s">
    )(ELSE
        <TELL CT .ATTACKER "'s">
    )>
    <HLIGHT 0>
    <TELL " attack (" N .ATTACK ") hits ">
    <HLIGHT ,H-BOLD>
    <COND (<EQUAL? .DEFENDER ,CURRENT-CHARACTER>
        <TELL D .DEFENDER>
    )(ELSE
        <TELL T .DEFENDER>
    )>
    <HLIGHT 0>
    <TELL " for ">
    <HLIGHT ,H-BOLD>
    <TELL N .DAMAGE " damage">
    <HLIGHT 0>
    <TELL ,PERIOD-CR>>

; "Calculate combat score"
<ROUTINE CALCULATE-COMBAT (CHARACTER "OPT" CONTAINER)
    <COND (<NOT .CONTAINER> <SET CONTAINER ,PLAYER>)>
    <RETURN <CALCULATE-ABILITY .CHARACTER ABILITY-COMBAT .CONTAINER>>>

; "Calculate defense score"
<ROUTINE CALCULATE-DEFENSE (CHARACTER "OPT" CONTAINER "AUX" RESULT)
    <COND (<NOT .CONTAINER> <SET CONTAINER ,PLAYER>)>
    <SET RESULT <GETP .CHARACTER ,P?RANK>>
    <SET RESULT <+ .RESULT <CALCULATE-ABILITY .CHARACTER ABILITY-COMBAT .CONTAINER>>>
    <COND (<AND <N=? .CONTAINER ,PLAYER> <N=? .CHARACTER ,CURRENT-CHARACTER>>
        <SET RESULT <+ .RESULT <FIND-BEST-LIST P?DEFENSE ,WEARBIT <GETP .CHARACTER ,P?POSSESSIONS>>>>
    )(ELSE
        <SET RESULT <+ .RESULT <FIND-BEST ,P?DEFENSE ,WEARBIT .CONTAINER>>>
    )>
    <COND (<G? .RESULT 12> <SET RESULT 12>)>
    <COND (<L? .RESULT 1> <SET RESULT 1>)>
    <RETURN .RESULT>>

; "Wrapper for combat. Sets DOOM on result"
<ROUTINE CHECK-COMBAT (MONSTER "OPT" STORY (MODIFIER 0))
    <COND (<NOT .STORY> <SET STORY ,HERE>)>
    <COND (<FIGHT .MONSTER .MODIFIER>
       <PREVENT-DEATH .STORY>
       <RTRUE>
    )(ELSE
        <PUTP .STORY ,P?DOOM T>
        <RFALSE>
    )>>

; "Initialize Monser Stats"
<ROUTINE COMBAT-MONSTER (MONSTER COMBAT DEFENSE STAMINA)
    <PUT .MONSTER ,P?COMBAT .COMBAT>
    <PUT .MONSTER ,P?DEFENSE .DEFENSE>
    <PUT .MONSTER ,P?DEFENSE .STAMINA>>

; "Display combatants' status"
<ROUTINE COMBAT-STATUS (ROUND MONSTER STAMINA-PLAYER STAMINA-MONSTER)
    <CRLF>
    <HLIGHT ,H-BOLD>
    <TELL "Round " N .ROUND ": ">
    <HLIGHT 0>
    <HLIGHT ,H-ITALIC>
    <TELL D ,CURRENT-CHARACTER> 
    <HLIGHT 0>
    <TELL " (STAMINA: " N .STAMINA-PLAYER "), ">
    <HLIGHT ,H-ITALIC>
    <TELL CT .MONSTER>
    <HLIGHT 0>
    <TELL " (STAMINA: " N .STAMINA-MONSTER ")">
    <TELL ,PERIOD-CR>
    <UPDATE-STATUS-LINE>>

<ROUTINE FIGHT (MONSTER "OPT" (MODIFIER 0) "AUX" RESULT ATTACK STAMINA-PLAYER COMBAT-PLAYER DEFENSE-PLAYER STAMINA-MONSTER COMBAT-MONSTER DEFENSE-MONSTER (ROUND 0))
    <SET STAMINA-PLAYER ,STAMINA>
    <SET DEFENSE-PLAYER <CALCULATE-DEFENSE ,CURRENT-CHARACTER>>
    <SET COMBAT-PLAYER <CALCULATE-COMBAT ,CURRENT-CHARACTER>>
    <COND (<G? .COMBAT-PLAYER 12> <SET .COMBAT-PLAYER 12>)>
    <SET STAMINA-MONSTER <GETP .MONSTER ,P?STAMINA>>
    <SET DEFENSE-MONSTER <GETP .MONSTER ,P?DEFENSE>>
    <SET COMBAT-MONSTER <GETP .MONSTER ,P?COMBAT>>
    <COND (<G? .COMBAT-MONSTER 12> <SET .COMBAT-MONSTER 12>)>
    <CRLF>
    <TELL "Resolving combat between ">
    <HLIGHT ,H-BOLD>
    <TELL D ,CURRENT-CHARACTER>
    <HLIGHT 0>
    <TELL " (COMBAT: " N .COMBAT-PLAYER " DEFENSE: " N .DEFENSE-PLAYER>
    <COND (<G? .MODIFIER 0> <TELL ", +" N .MODIFIER " to rolls">)>
    <TELL ") and ">
    <HLIGHT ,H-BOLD>
    <TELL T .MONSTER>
    <HLIGHT 0>
    <TELL " (COMBAT: " N .COMBAT-MONSTER " DEFENSE: " N .DEFENSE-MONSTER ")">
    <TELL ,PERIOD-CR>
    <REPEAT ()
        <INC .ROUND>
        <COMBAT-STATUS .ROUND .MONSTER .STAMINA-PLAYER .STAMINA-MONSTER>
        <PRESS-A-KEY>
        <SET ATTACK <+ <ROLL-DICE 2> .COMBAT-PLAYER .MODIFIER>>
        <SET RESULT <- .ATTACK .DEFENSE-MONSTER>>
        <COND (<G? .RESULT 0>
            <ATTACK-MESSAGE ,CURRENT-CHARACTER .MONSTER .ATTACK .RESULT>
            <SET STAMINA-MONSTER <- .STAMINA-MONSTER .RESULT>>
            <COND (<L? .STAMINA-MONSTER 1> <RETURN>)>
        )(ELSE
            <ATTACK-INEFFECTIVE ,CURRENT-CHARACTER>
        )>
        <PRESS-A-KEY>
        <SET ATTACK <+ <ROLL-DICE 2> .COMBAT-MONSTER>>
        <SET RESULT <- .ATTACK .DEFENSE-PLAYER>>
        <COND (<G? .RESULT 0>
            <ATTACK-MESSAGE .MONSTER ,CURRENT-CHARACTER .ATTACK .RESULT>
            <SET STAMINA-PLAYER <- .STAMINA-PLAYER .RESULT>>
            <COND (<L? .STAMINA-PLAYER 1> <RETURN>)>
        )(ELSE
            <ATTACK-INEFFECTIVE .MONSTER>
        )>
        <PRESS-A-KEY>
        <UPDATE-STATUS-LINE>
    >
    <COND (<L? .STAMINA-PLAYER 0> <SET .STAMINA-PLAYER 0>)>
    <SETG STAMINA .STAMINA-PLAYER>
    <UPDATE-STATUS-LINE>    
    <COND (<L=? .STAMINA-MONSTER 0>
        <HAS-PREVAILED ,CURRENT-CHARACTER>
        <RTRUE>
    )>
    <HAS-PREVAILED .MONSTER>
    <RFALSE>>

<ROUTINE HAS-PREVAILED (CHARACTER)
    <CRLF>
    <HLIGHT ,H-BOLD>
    <COND (<EQUAL? .CHARACTER ,CURRENT-CHARACTER>
        <TELL D .CHARACTER " ">
    )(ELSE
        <TELL CT .CHARACTER " ">
    )>
    <COND (<FSET? .CHARACTER ,PLURALBIT> <TELL "have">)(ELSE <TELL "has">)>
    <TELL " prevailed">
    <HLIGHT 0>
    <TELL ,PERIOD-CR>>

<ROUTINE TEST-ABILITY (CHARACTER ABILITY DIFFICULTY "OPT" SCORE (ROLL 0) (MODIFIERS T) "AUX" (RESULT F) (TOTAL 0))
    <SET SCORE <CALCULATE-ABILITY .CHARACTER .ABILITY>>
    <TELL "Making a ">
    <HLIGHT ,H-BOLD>
    <TELL <GET ,ABILITIES .ABILITY>>
    <HLIGHT 0>
    <TELL " (" >
    <HLIGHT ,H-BOLD>
    <TELL N .SCORE>
    <HLIGHT 0>
    <TELL ") roll at ">
    <HLIGHT ,H-BOLD>
    <TELL N .DIFFICULTY>
    <HLIGHT 0>
    <TELL " difficulty.." ,PERIOD-CR>
    <PRESS-A-KEY>
    <SET ROLL <ROLL-DICE 2>>
    <SET TOTAL <+ .SCORE .ROLL>>
    <CRLF>
    <TELL "Rolled (">
    <HLIGHT ,H-BOLD>
    <TELL <GET ,ABILITIES .ABILITY> " " N .SCORE>
    <HLIGHT 0>
    <TELL ") + ">
    <HLIGHT ,H-BOLD>
    <TELL N .ROLL>
    <HLIGHT 0>
    <TELL " = ">
    <HLIGHT ,H-BOLD>
    <TELL N .TOTAL>
    <HLIGHT 0>
    <TELL " ... ">
    <HLIGHT ,H-BOLD>
    <COND (<G? .TOTAL .DIFFICULTY>
        <TELL "Success!">
        <SET RESULT T>
    )(ELSE
        <TELL "Failed!">    
    )>
    <HLIGHT 0>
    <RETURN .RESULT>>
